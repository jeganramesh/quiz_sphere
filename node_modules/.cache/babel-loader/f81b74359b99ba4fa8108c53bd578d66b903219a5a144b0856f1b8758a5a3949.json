{"ast":null,"code":"var _jsxFileName = \"/home/jegan/Desktop/app/quizsphere_web/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\n// Make sure to install the 'marked' library: npm install marked\nimport { marked } from 'marked';\n\n// Placeholder for API URL. In a real app, use environment variables.\n// For local development, you can set this to your machine's local IP address.\n// Example: const API_URL = \"http://192.168.1.100:8000\";\n// Or, if running the backend on the same machine as the frontend, you might use \"http://localhost:8000\"\n// If your API requires an API key, ensure it's set via REACT_APP_API_KEY environment variable and passed correctly.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = process.env.REACT_APP_API_URL || \"http://192.168.1.8:8000/chat\"; // Default to the provided IP, but allow override via environment variable\n\nfunction App() {\n  _s();\n  const [messages, setMessages] = useState([{\n    id: 1,\n    text: \"Hi there! Welcome to Quiz Sphere! Ready to test your knowledge and learn something new? Let's get quizzing! What subject are you interested in exploring today?\",\n    sender: \"bot\"\n  }]);\n  const [input, setInput] = useState(\"\");\n  const chatBoxRef = useRef(null);\n\n  // Function to scroll to the bottom of the chat box\n  useEffect(() => {\n    if (chatBoxRef.current) {\n      chatBoxRef.current.scrollTop = chatBoxRef.current.scrollHeight;\n    }\n  }, [messages]);\n\n  // Function to call the backend API\n  async function callBackendApi(prompt) {\n    try {\n      // The original code included '?key=${API_KEY}' which might be incorrect if API_KEY is not a valid key or if the backend doesn't expect it as a query parameter.\n      // If your backend requires an API key, you might need to adjust this fetch call, e.g., by adding it to headers or as a different query parameter.\n      const response = await fetch(API_URL, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n          // If an API key is required, you might add it here:\n          // \"Authorization\": `Bearer ${process.env.REACT_APP_API_KEY}`\n        },\n        body: JSON.stringify({\n          // Adjust the body structure based on your backend's expected format.\n          // The current structure is based on Gemini API.\n          contents: [{\n            parts: [{\n              text: prompt\n            }]\n          }]\n        })\n      });\n      if (response.ok) {\n        const data = await response.json();\n        // Ensure the expected structure exists before accessing. This part is specific to Gemini API response structure.\n        // You might need to adjust this based on your actual backend response.\n        if (data && data.candidates && data.candidates.length > 0 && data.candidates[0].content && data.candidates[0].content.parts && data.candidates[0].content.parts.length > 0 && data.candidates[0].content.parts[0].text) {\n          return data.candidates[0].content.parts[0].text;\n        } else {\n          console.error(\"Unexpected API response structure:\", data);\n          return \"Sorry, I received an unexpected response from the API.\";\n        }\n      } else {\n        console.error(\"Error with API:\", response.statusText);\n        return `Sorry, there was an error with the API. Status: ${response.status}`;\n      }\n    } catch (error) {\n      console.error(\"Fetch error:\", error);\n      return \"Sorry, there was a network error.\";\n    }\n  }\n\n  // Function to handle sending a message\n  const sendMessage = async () => {\n    if (input.trim() === \"\") return;\n    const newUserMessage = {\n      id: Date.now(),\n      text: input,\n      sender: \"user\"\n    };\n    setMessages(prevMessages => [...prevMessages, newUserMessage]);\n    setInput(\"\"); // Clear input field\n\n    // Call backend API and display bot response\n    const botResponseText = await callBackendApi(input);\n    const newBotMessage = {\n      id: Date.now() + 1,\n      // Ensure unique ID\n      text: botResponseText,\n      sender: \"bot\"\n    };\n    setMessages(prevMessages => [...prevMessages, newBotMessage]);\n  };\n\n  // Handle Enter key press for sending message\n  const handleKeyPress = event => {\n    if (event.key === 'Enter') {\n      sendMessage();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Quiz Sphere Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      ref: chatBoxRef,\n      children: messages.map(message => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `chat-message ${message.sender}-message`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: `avatar ${message.sender}-avatar`,\n          children: message.sender === \"bot\" ? /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fas fa-robot\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 43\n          }, this) : /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fas fa-user\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 78\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          dangerouslySetInnerHTML: {\n            __html: message.sender === \"bot\" ? marked.parse(message.text) : message.text\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 13\n        }, this)]\n      }, message.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"userInput\",\n        placeholder: \"Type your message...\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        onKeyPress: handleKeyPress\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        children: /*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-paper-plane\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"1w+ciWR/kxhFmXDLaQS5EZA4CpY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","marked","jsxDEV","_jsxDEV","API_URL","process","env","REACT_APP_API_URL","App","_s","messages","setMessages","id","text","sender","input","setInput","chatBoxRef","current","scrollTop","scrollHeight","callBackendApi","prompt","response","fetch","method","headers","body","JSON","stringify","contents","parts","ok","data","json","candidates","length","content","console","error","statusText","status","sendMessage","trim","newUserMessage","Date","now","prevMessages","botResponseText","newBotMessage","handleKeyPress","event","key","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","map","message","dangerouslySetInnerHTML","__html","parse","type","placeholder","value","onChange","e","target","onKeyPress","onClick","_c","$RefreshReg$"],"sources":["/home/jegan/Desktop/app/quizsphere_web/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\n// Make sure to install the 'marked' library: npm install marked\nimport { marked } from 'marked';\n\n// Placeholder for API URL. In a real app, use environment variables.\n// For local development, you can set this to your machine's local IP address.\n// Example: const API_URL = \"http://192.168.1.100:8000\";\n// Or, if running the backend on the same machine as the frontend, you might use \"http://localhost:8000\"\n// If your API requires an API key, ensure it's set via REACT_APP_API_KEY environment variable and passed correctly.\nconst API_URL = process.env.REACT_APP_API_URL || \"http://192.168.1.8:8000/chat\"; // Default to the provided IP, but allow override via environment variable\n\nfunction App() {\n  const [messages, setMessages] = useState([\n    {\n      id: 1,\n      text: \"Hi there! Welcome to Quiz Sphere! Ready to test your knowledge and learn something new? Let's get quizzing! What subject are you interested in exploring today?\",\n      sender: \"bot\"\n    }\n  ]);\n  const [input, setInput] = useState(\"\");\n  const chatBoxRef = useRef(null);\n\n  // Function to scroll to the bottom of the chat box\n  useEffect(() => {\n    if (chatBoxRef.current) {\n      chatBoxRef.current.scrollTop = chatBoxRef.current.scrollHeight;\n    }\n  }, [messages]);\n\n  // Function to call the backend API\n  async function callBackendApi(prompt) {\n    try {\n      // The original code included '?key=${API_KEY}' which might be incorrect if API_KEY is not a valid key or if the backend doesn't expect it as a query parameter.\n      // If your backend requires an API key, you might need to adjust this fetch call, e.g., by adding it to headers or as a different query parameter.\n      const response = await fetch(API_URL, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          // If an API key is required, you might add it here:\n          // \"Authorization\": `Bearer ${process.env.REACT_APP_API_KEY}`\n        },\n        body: JSON.stringify({\n          // Adjust the body structure based on your backend's expected format.\n          // The current structure is based on Gemini API.\n          contents: [{\n            parts: [{\n              text: prompt\n            }]\n          }]\n        })\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        // Ensure the expected structure exists before accessing. This part is specific to Gemini API response structure.\n        // You might need to adjust this based on your actual backend response.\n        if (data && data.candidates && data.candidates.length > 0 &&\n            data.candidates[0].content && data.candidates[0].content.parts &&\n            data.candidates[0].content.parts.length > 0 && data.candidates[0].content.parts[0].text) {\n          return data.candidates[0].content.parts[0].text;\n        } else {\n          console.error(\"Unexpected API response structure:\", data);\n          return \"Sorry, I received an unexpected response from the API.\";\n        }\n      } else {\n        console.error(\"Error with API:\", response.statusText);\n        return `Sorry, there was an error with the API. Status: ${response.status}`;\n      }\n    } catch (error) {\n      console.error(\"Fetch error:\", error);\n      return \"Sorry, there was a network error.\";\n    }\n  }\n\n  // Function to handle sending a message\n  const sendMessage = async () => {\n    if (input.trim() === \"\") return;\n\n    const newUserMessage = {\n      id: Date.now(),\n      text: input,\n      sender: \"user\"\n    };\n\n    setMessages(prevMessages => [...prevMessages, newUserMessage]);\n    setInput(\"\"); // Clear input field\n\n    // Call backend API and display bot response\n    const botResponseText = await callBackendApi(input);\n    const newBotMessage = {\n      id: Date.now() + 1, // Ensure unique ID\n      text: botResponseText,\n      sender: \"bot\"\n    };\n    setMessages(prevMessages => [...prevMessages, newBotMessage]);\n  };\n\n  // Handle Enter key press for sending message\n  const handleKeyPress = (event) => {\n    if (event.key === 'Enter') {\n      sendMessage();\n    }\n  };\n\n  return (\n    <div className=\"chat-container\">\n      <div className=\"chat-header\">\n        <h2>Quiz Sphere Chat</h2>\n      </div>\n      <div className=\"chat-box\" ref={chatBoxRef}>\n        {messages.map(message => (\n          <div key={message.id} className={`chat-message ${message.sender}-message`}>\n            <div className={`avatar ${message.sender}-avatar`}>\n              {message.sender === \"bot\" ? <i className=\"fas fa-robot\"></i> : <i className=\"fas fa-user\"></i>}\n            </div>\n            {/* Render markdown for bot messages */}\n            <p dangerouslySetInnerHTML={{ __html: message.sender === \"bot\" ? marked.parse(message.text) : message.text }} />\n          </div>\n        ))}\n      </div>\n      <div className=\"input-container\">\n        <input\n          type=\"text\"\n          id=\"userInput\"\n          placeholder=\"Type your message...\"\n          value={input}\n          onChange={(e) => setInput(e.target.value)}\n          onKeyPress={handleKeyPress}\n        />\n        <button onClick={sendMessage}>\n          <i className=\"fas fa-paper-plane\"></i>\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}